/*
接口文档

接口文档描述

API version: 1.0.0
Contact: pingdongyi@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mmsapi

import (
	"encoding/json"
)

// Witness struct for Witness
type Witness struct {
	Addr *string `json:"Addr,omitempty"`
	CreateBlockTime *int64 `json:"CreateBlockTime,omitempty"`
	Payload interface{} `json:"Payload,omitempty"`
	Score *int64 `json:"Score,omitempty"`
	Vote *int64 `json:"Vote,omitempty"`
}

// NewWitness instantiates a new Witness object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWitness() *Witness {
	this := Witness{}
	return &this
}

// NewWitnessWithDefaults instantiates a new Witness object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWitnessWithDefaults() *Witness {
	this := Witness{}
	return &this
}

// GetAddr returns the Addr field value if set, zero value otherwise.
func (o *Witness) GetAddr() string {
	if o == nil || o.Addr == nil {
		var ret string
		return ret
	}
	return *o.Addr
}

// GetAddrOk returns a tuple with the Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Witness) GetAddrOk() (*string, bool) {
	if o == nil || o.Addr == nil {
		return nil, false
	}
	return o.Addr, true
}

// HasAddr returns a boolean if a field has been set.
func (o *Witness) HasAddr() bool {
	if o != nil && o.Addr != nil {
		return true
	}

	return false
}

// SetAddr gets a reference to the given string and assigns it to the Addr field.
func (o *Witness) SetAddr(v string) {
	o.Addr = &v
}

// GetCreateBlockTime returns the CreateBlockTime field value if set, zero value otherwise.
func (o *Witness) GetCreateBlockTime() int64 {
	if o == nil || o.CreateBlockTime == nil {
		var ret int64
		return ret
	}
	return *o.CreateBlockTime
}

// GetCreateBlockTimeOk returns a tuple with the CreateBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Witness) GetCreateBlockTimeOk() (*int64, bool) {
	if o == nil || o.CreateBlockTime == nil {
		return nil, false
	}
	return o.CreateBlockTime, true
}

// HasCreateBlockTime returns a boolean if a field has been set.
func (o *Witness) HasCreateBlockTime() bool {
	if o != nil && o.CreateBlockTime != nil {
		return true
	}

	return false
}

// SetCreateBlockTime gets a reference to the given int64 and assigns it to the CreateBlockTime field.
func (o *Witness) SetCreateBlockTime(v int64) {
	o.CreateBlockTime = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Witness) GetPayload() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Witness) GetPayloadOk() (*interface{}, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return &o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *Witness) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given interface{} and assigns it to the Payload field.
func (o *Witness) SetPayload(v interface{}) {
	o.Payload = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Witness) GetScore() int64 {
	if o == nil || o.Score == nil {
		var ret int64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Witness) GetScoreOk() (*int64, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Witness) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given int64 and assigns it to the Score field.
func (o *Witness) SetScore(v int64) {
	o.Score = &v
}

// GetVote returns the Vote field value if set, zero value otherwise.
func (o *Witness) GetVote() int64 {
	if o == nil || o.Vote == nil {
		var ret int64
		return ret
	}
	return *o.Vote
}

// GetVoteOk returns a tuple with the Vote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Witness) GetVoteOk() (*int64, bool) {
	if o == nil || o.Vote == nil {
		return nil, false
	}
	return o.Vote, true
}

// HasVote returns a boolean if a field has been set.
func (o *Witness) HasVote() bool {
	if o != nil && o.Vote != nil {
		return true
	}

	return false
}

// SetVote gets a reference to the given int64 and assigns it to the Vote field.
func (o *Witness) SetVote(v int64) {
	o.Vote = &v
}

func (o Witness) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Addr != nil {
		toSerialize["Addr"] = o.Addr
	}
	if o.CreateBlockTime != nil {
		toSerialize["CreateBlockTime"] = o.CreateBlockTime
	}
	if o.Payload != nil {
		toSerialize["Payload"] = o.Payload
	}
	if o.Score != nil {
		toSerialize["Score"] = o.Score
	}
	if o.Vote != nil {
		toSerialize["Vote"] = o.Vote
	}
	return json.Marshal(toSerialize)
}

type NullableWitness struct {
	value *Witness
	isSet bool
}

func (v NullableWitness) Get() *Witness {
	return v.value
}

func (v *NullableWitness) Set(val *Witness) {
	v.value = val
	v.isSet = true
}

func (v NullableWitness) IsSet() bool {
	return v.isSet
}

func (v *NullableWitness) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWitness(val *Witness) *NullableWitness {
	return &NullableWitness{value: val, isSet: true}
}

func (v NullableWitness) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWitness) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


